class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {

        int n = nums.size();
        if(n == 1)
        {
            return nums[0];
        }
        int dp[n];
        dp[0] = nums[0];
        
        int mindp[n];
        mindp[0] = nums[0];
        int sum = nums[0];
        int f = nums[0];
        for(int i=1;i<n;i++)
        {
            f = max(f,nums[i]);
            sum += nums[i];
            dp[i] = max(dp[i-1] + nums[i],nums[i]);
            mindp[i] = min(mindp[i-1] + nums[i], nums[i]);
        }
        
        if(f < 0)
        {
            return f;
        }
        int x = sum - *min_element(mindp,mindp+n);
                      
        return max(*max_element(dp,dp+n),x);



    }
};
